/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/viveksinghggits/krius/pkg/apis/krius.dev/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SekretLister helps list Sekrets.
// All objects returned here must be treated as read-only.
type SekretLister interface {
	// List lists all Sekrets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Sekret, err error)
	// Sekrets returns an object that can list and get Sekrets.
	Sekrets(namespace string) SekretNamespaceLister
	SekretListerExpansion
}

// sekretLister implements the SekretLister interface.
type sekretLister struct {
	indexer cache.Indexer
}

// NewSekretLister returns a new SekretLister.
func NewSekretLister(indexer cache.Indexer) SekretLister {
	return &sekretLister{indexer: indexer}
}

// List lists all Sekrets in the indexer.
func (s *sekretLister) List(selector labels.Selector) (ret []*v1alpha1.Sekret, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Sekret))
	})
	return ret, err
}

// Sekrets returns an object that can list and get Sekrets.
func (s *sekretLister) Sekrets(namespace string) SekretNamespaceLister {
	return sekretNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SekretNamespaceLister helps list and get Sekrets.
// All objects returned here must be treated as read-only.
type SekretNamespaceLister interface {
	// List lists all Sekrets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Sekret, err error)
	// Get retrieves the Sekret from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Sekret, error)
	SekretNamespaceListerExpansion
}

// sekretNamespaceLister implements the SekretNamespaceLister
// interface.
type sekretNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Sekrets in the indexer for a given namespace.
func (s sekretNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Sekret, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Sekret))
	})
	return ret, err
}

// Get retrieves the Sekret from the indexer for a given namespace and name.
func (s sekretNamespaceLister) Get(name string) (*v1alpha1.Sekret, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sekret"), name)
	}
	return obj.(*v1alpha1.Sekret), nil
}
